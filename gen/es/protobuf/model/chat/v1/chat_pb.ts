// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=.ts"
// @generated from file protobuf/model/chat/v1/chat.proto (package model.chat.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { User } from "../../user/v1/user_pb.ts";

/**
 * @generated from enum model.chat.v1.ChatType
 */
export enum ChatType {
  /**
   * @generated from enum value: CHAT_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: CHAT_TYPE_CHANNEL = 1;
   */
  CHANNEL = 1,

  /**
   * @generated from enum value: CHAT_TYPE_GROUP = 2;
   */
  GROUP = 2,

  /**
   * @generated from enum value: CHAT_TYPE_DIRECT = 3;
   */
  DIRECT = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(ChatType)
proto3.util.setEnumType(ChatType, "model.chat.v1.ChatType", [
  { no: 0, name: "CHAT_TYPE_UNSPECIFIED" },
  { no: 1, name: "CHAT_TYPE_CHANNEL" },
  { no: 2, name: "CHAT_TYPE_GROUP" },
  { no: 3, name: "CHAT_TYPE_DIRECT" },
]);

/**
 * @generated from message model.chat.v1.Member
 */
export class Member extends Message<Member> {
  /**
   * @generated from field: string user_id = 1;
   */
  userId = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string last_name = 3;
   */
  lastName = "";

  constructor(data?: PartialMessage<Member>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "model.chat.v1.Member";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "last_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Member {
    return new Member().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Member {
    return new Member().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Member {
    return new Member().fromJsonString(jsonString, options);
  }

  static equals(a: Member | PlainMessage<Member> | undefined, b: Member | PlainMessage<Member> | undefined): boolean {
    return proto3.util.equals(Member, a, b);
  }
}

/**
 * @generated from message model.chat.v1.LastMessage
 */
export class LastMessage extends Message<LastMessage> {
  /**
   * @generated from field: string message_type = 1;
   */
  messageType = "";

  /**
   * @generated from field: string message_caption = 2;
   */
  messageCaption = "";

  constructor(data?: PartialMessage<LastMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "model.chat.v1.LastMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "message_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "message_caption", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LastMessage {
    return new LastMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LastMessage {
    return new LastMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LastMessage {
    return new LastMessage().fromJsonString(jsonString, options);
  }

  static equals(a: LastMessage | PlainMessage<LastMessage> | undefined, b: LastMessage | PlainMessage<LastMessage> | undefined): boolean {
    return proto3.util.equals(LastMessage, a, b);
  }
}

/**
 * @generated from message model.chat.v1.ChatDetail
 */
export class ChatDetail extends Message<ChatDetail> {
  /**
   * @generated from oneof model.chat.v1.ChatDetail.chat_detail_type
   */
  chatDetailType: {
    /**
     * @generated from field: model.chat.v1.ChannelChatDetail channel_detail = 1;
     */
    value: ChannelChatDetail;
    case: "channelDetail";
  } | {
    /**
     * @generated from field: model.chat.v1.GroupChatDetail group_detail = 2;
     */
    value: GroupChatDetail;
    case: "groupDetail";
  } | {
    /**
     * @generated from field: model.chat.v1.DirectChatDetail direct_detail = 3;
     */
    value: DirectChatDetail;
    case: "directDetail";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<ChatDetail>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "model.chat.v1.ChatDetail";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "channel_detail", kind: "message", T: ChannelChatDetail, oneof: "chat_detail_type" },
    { no: 2, name: "group_detail", kind: "message", T: GroupChatDetail, oneof: "chat_detail_type" },
    { no: 3, name: "direct_detail", kind: "message", T: DirectChatDetail, oneof: "chat_detail_type" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChatDetail {
    return new ChatDetail().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChatDetail {
    return new ChatDetail().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChatDetail {
    return new ChatDetail().fromJsonString(jsonString, options);
  }

  static equals(a: ChatDetail | PlainMessage<ChatDetail> | undefined, b: ChatDetail | PlainMessage<ChatDetail> | undefined): boolean {
    return proto3.util.equals(ChatDetail, a, b);
  }
}

/**
 * @generated from message model.chat.v1.ChannelChatDetail
 */
export class ChannelChatDetail extends Message<ChannelChatDetail> {
  /**
   * @generated from field: string title = 1;
   */
  title = "";

  /**
   * @generated from field: repeated string members = 2;
   */
  members: string[] = [];

  /**
   * @generated from field: repeated string admins = 3;
   */
  admins: string[] = [];

  /**
   * @generated from field: string owner = 4;
   */
  owner = "";

  /**
   * @generated from field: repeated string removed_users = 5;
   */
  removedUsers: string[] = [];

  /**
   * @generated from field: string username = 6;
   */
  username = "";

  /**
   * @generated from field: string description = 7;
   */
  description = "";

  constructor(data?: PartialMessage<ChannelChatDetail>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "model.chat.v1.ChannelChatDetail";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "members", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "admins", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "removed_users", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 6, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChannelChatDetail {
    return new ChannelChatDetail().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChannelChatDetail {
    return new ChannelChatDetail().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChannelChatDetail {
    return new ChannelChatDetail().fromJsonString(jsonString, options);
  }

  static equals(a: ChannelChatDetail | PlainMessage<ChannelChatDetail> | undefined, b: ChannelChatDetail | PlainMessage<ChannelChatDetail> | undefined): boolean {
    return proto3.util.equals(ChannelChatDetail, a, b);
  }
}

/**
 * @generated from message model.chat.v1.GroupChatDetail
 */
export class GroupChatDetail extends Message<GroupChatDetail> {
  /**
   * @generated from field: string title = 1;
   */
  title = "";

  /**
   * @generated from field: repeated string members = 2;
   */
  members: string[] = [];

  /**
   * @generated from field: repeated string admins = 3;
   */
  admins: string[] = [];

  /**
   * @generated from field: string owner = 4;
   */
  owner = "";

  /**
   * @generated from field: repeated string removed_users = 5;
   */
  removedUsers: string[] = [];

  /**
   * @generated from field: string username = 6;
   */
  username = "";

  /**
   * @generated from field: string description = 7;
   */
  description = "";

  constructor(data?: PartialMessage<GroupChatDetail>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "model.chat.v1.GroupChatDetail";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "members", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "admins", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "removed_users", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 6, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GroupChatDetail {
    return new GroupChatDetail().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GroupChatDetail {
    return new GroupChatDetail().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GroupChatDetail {
    return new GroupChatDetail().fromJsonString(jsonString, options);
  }

  static equals(a: GroupChatDetail | PlainMessage<GroupChatDetail> | undefined, b: GroupChatDetail | PlainMessage<GroupChatDetail> | undefined): boolean {
    return proto3.util.equals(GroupChatDetail, a, b);
  }
}

/**
 * @generated from message model.chat.v1.DirectChatDetail
 */
export class DirectChatDetail extends Message<DirectChatDetail> {
  /**
   * @generated from field: model.user.v1.User recipient = 1;
   */
  recipient?: User;

  constructor(data?: PartialMessage<DirectChatDetail>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "model.chat.v1.DirectChatDetail";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "recipient", kind: "message", T: User },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DirectChatDetail {
    return new DirectChatDetail().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DirectChatDetail {
    return new DirectChatDetail().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DirectChatDetail {
    return new DirectChatDetail().fromJsonString(jsonString, options);
  }

  static equals(a: DirectChatDetail | PlainMessage<DirectChatDetail> | undefined, b: DirectChatDetail | PlainMessage<DirectChatDetail> | undefined): boolean {
    return proto3.util.equals(DirectChatDetail, a, b);
  }
}

/**
 * @generated from message model.chat.v1.Chat
 */
export class Chat extends Message<Chat> {
  /**
   * @generated from field: string chat_id = 1;
   */
  chatId = "";

  /**
   * @generated from field: model.chat.v1.ChatType chat_type = 2;
   */
  chatType = ChatType.UNSPECIFIED;

  /**
   * @generated from field: model.chat.v1.ChatDetail chat_detail = 3;
   */
  chatDetail?: ChatDetail;

  /**
   * @generated from field: model.chat.v1.LastMessage last_message = 4;
   */
  lastMessage?: LastMessage;

  constructor(data?: PartialMessage<Chat>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "model.chat.v1.Chat";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "chat_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "chat_type", kind: "enum", T: proto3.getEnumType(ChatType) },
    { no: 3, name: "chat_detail", kind: "message", T: ChatDetail },
    { no: 4, name: "last_message", kind: "message", T: LastMessage },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Chat {
    return new Chat().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Chat {
    return new Chat().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Chat {
    return new Chat().fromJsonString(jsonString, options);
  }

  static equals(a: Chat | PlainMessage<Chat> | undefined, b: Chat | PlainMessage<Chat> | undefined): boolean {
    return proto3.util.equals(Chat, a, b);
  }
}

