// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=.ts"
// @generated from file protobuf/model/message/v1/message.proto (package model.message.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message as Message$1, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from message model.message.v1.MessageSender
 */
export class MessageSender extends Message$1<MessageSender> {
  /**
   * @generated from field: string user_id = 1;
   */
  userId = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string last_name = 3;
   */
  lastName = "";

  /**
   * @generated from field: string username = 4;
   */
  username = "";

  constructor(data?: PartialMessage<MessageSender>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "model.message.v1.MessageSender";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "last_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MessageSender {
    return new MessageSender().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MessageSender {
    return new MessageSender().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MessageSender {
    return new MessageSender().fromJsonString(jsonString, options);
  }

  static equals(a: MessageSender | PlainMessage<MessageSender> | undefined, b: MessageSender | PlainMessage<MessageSender> | undefined): boolean {
    return proto3.util.equals(MessageSender, a, b);
  }
}

/**
 * @generated from message model.message.v1.Message
 */
export class Message extends Message$1<Message> {
  /**
   * @generated from field: string message_id = 1;
   */
  messageId = "";

  /**
   * @generated from field: model.message.v1.MessageSender sender = 2;
   */
  sender?: MessageSender;

  /**
   * @generated from field: int64 created_at = 3;
   */
  createdAt = protoInt64.zero;

  /**
   * @generated from field: bool edited = 4;
   */
  edited = false;

  /**
   * @generated from field: bool seen = 5;
   */
  seen = false;

  /**
   * @generated from field: string type = 6;
   */
  type = "";

  /**
   * @generated from oneof model.message.v1.Message.payload
   */
  payload: {
    /**
     * @generated from field: model.message.v1.TextMessage text_message = 7;
     */
    value: TextMessage;
    case: "textMessage";
  } | {
    /**
     * @generated from field: model.message.v1.LabelMessage label_message = 8;
     */
    value: LabelMessage;
    case: "labelMessage";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Message>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "model.message.v1.Message";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "message_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "sender", kind: "message", T: MessageSender },
    { no: 3, name: "created_at", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "edited", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "seen", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "text_message", kind: "message", T: TextMessage, oneof: "payload" },
    { no: 8, name: "label_message", kind: "message", T: LabelMessage, oneof: "payload" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Message {
    return new Message().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Message {
    return new Message().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Message {
    return new Message().fromJsonString(jsonString, options);
  }

  static equals(a: Message | PlainMessage<Message> | undefined, b: Message | PlainMessage<Message> | undefined): boolean {
    return proto3.util.equals(Message, a, b);
  }
}

/**
 * @generated from message model.message.v1.TextMessage
 */
export class TextMessage extends Message$1<TextMessage> {
  /**
   * @generated from field: string text = 1;
   */
  text = "";

  constructor(data?: PartialMessage<TextMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "model.message.v1.TextMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "text", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TextMessage {
    return new TextMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TextMessage {
    return new TextMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TextMessage {
    return new TextMessage().fromJsonString(jsonString, options);
  }

  static equals(a: TextMessage | PlainMessage<TextMessage> | undefined, b: TextMessage | PlainMessage<TextMessage> | undefined): boolean {
    return proto3.util.equals(TextMessage, a, b);
  }
}

/**
 * @generated from message model.message.v1.LabelMessage
 */
export class LabelMessage extends Message$1<LabelMessage> {
  /**
   * @generated from field: string text = 1;
   */
  text = "";

  constructor(data?: PartialMessage<LabelMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "model.message.v1.LabelMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "text", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LabelMessage {
    return new LabelMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LabelMessage {
    return new LabelMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LabelMessage {
    return new LabelMessage().fromJsonString(jsonString, options);
  }

  static equals(a: LabelMessage | PlainMessage<LabelMessage> | undefined, b: LabelMessage | PlainMessage<LabelMessage> | undefined): boolean {
    return proto3.util.equals(LabelMessage, a, b);
  }
}

