// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: protobuf/message/v1/message.proto

package messagev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/kavkaco/Kavka-ProtoBuf/gen/go/protobuf/message/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// MessageServiceName is the fully-qualified name of the MessageService service.
	MessageServiceName = "message.v1.MessageService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// MessageServiceFetchMessagesProcedure is the fully-qualified name of the MessageService's
	// FetchMessages RPC.
	MessageServiceFetchMessagesProcedure = "/message.v1.MessageService/FetchMessages"
	// MessageServiceSendTextMessageProcedure is the fully-qualified name of the MessageService's
	// SendTextMessage RPC.
	MessageServiceSendTextMessageProcedure = "/message.v1.MessageService/SendTextMessage"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	messageServiceServiceDescriptor               = v1.File_protobuf_message_v1_message_proto.Services().ByName("MessageService")
	messageServiceFetchMessagesMethodDescriptor   = messageServiceServiceDescriptor.Methods().ByName("FetchMessages")
	messageServiceSendTextMessageMethodDescriptor = messageServiceServiceDescriptor.Methods().ByName("SendTextMessage")
)

// MessageServiceClient is a client for the message.v1.MessageService service.
type MessageServiceClient interface {
	FetchMessages(context.Context, *connect.Request[v1.FetchMessagesRequest]) (*connect.Response[v1.FetchMessagesResponse], error)
	SendTextMessage(context.Context, *connect.Request[v1.SendTextMessageRequest]) (*connect.Response[v1.SendTextMessageResponse], error)
}

// NewMessageServiceClient constructs a client for the message.v1.MessageService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMessageServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) MessageServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &messageServiceClient{
		fetchMessages: connect.NewClient[v1.FetchMessagesRequest, v1.FetchMessagesResponse](
			httpClient,
			baseURL+MessageServiceFetchMessagesProcedure,
			connect.WithSchema(messageServiceFetchMessagesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		sendTextMessage: connect.NewClient[v1.SendTextMessageRequest, v1.SendTextMessageResponse](
			httpClient,
			baseURL+MessageServiceSendTextMessageProcedure,
			connect.WithSchema(messageServiceSendTextMessageMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// messageServiceClient implements MessageServiceClient.
type messageServiceClient struct {
	fetchMessages   *connect.Client[v1.FetchMessagesRequest, v1.FetchMessagesResponse]
	sendTextMessage *connect.Client[v1.SendTextMessageRequest, v1.SendTextMessageResponse]
}

// FetchMessages calls message.v1.MessageService.FetchMessages.
func (c *messageServiceClient) FetchMessages(ctx context.Context, req *connect.Request[v1.FetchMessagesRequest]) (*connect.Response[v1.FetchMessagesResponse], error) {
	return c.fetchMessages.CallUnary(ctx, req)
}

// SendTextMessage calls message.v1.MessageService.SendTextMessage.
func (c *messageServiceClient) SendTextMessage(ctx context.Context, req *connect.Request[v1.SendTextMessageRequest]) (*connect.Response[v1.SendTextMessageResponse], error) {
	return c.sendTextMessage.CallUnary(ctx, req)
}

// MessageServiceHandler is an implementation of the message.v1.MessageService service.
type MessageServiceHandler interface {
	FetchMessages(context.Context, *connect.Request[v1.FetchMessagesRequest]) (*connect.Response[v1.FetchMessagesResponse], error)
	SendTextMessage(context.Context, *connect.Request[v1.SendTextMessageRequest]) (*connect.Response[v1.SendTextMessageResponse], error)
}

// NewMessageServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMessageServiceHandler(svc MessageServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	messageServiceFetchMessagesHandler := connect.NewUnaryHandler(
		MessageServiceFetchMessagesProcedure,
		svc.FetchMessages,
		connect.WithSchema(messageServiceFetchMessagesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	messageServiceSendTextMessageHandler := connect.NewUnaryHandler(
		MessageServiceSendTextMessageProcedure,
		svc.SendTextMessage,
		connect.WithSchema(messageServiceSendTextMessageMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/message.v1.MessageService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case MessageServiceFetchMessagesProcedure:
			messageServiceFetchMessagesHandler.ServeHTTP(w, r)
		case MessageServiceSendTextMessageProcedure:
			messageServiceSendTextMessageHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedMessageServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMessageServiceHandler struct{}

func (UnimplementedMessageServiceHandler) FetchMessages(context.Context, *connect.Request[v1.FetchMessagesRequest]) (*connect.Response[v1.FetchMessagesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("message.v1.MessageService.FetchMessages is not implemented"))
}

func (UnimplementedMessageServiceHandler) SendTextMessage(context.Context, *connect.Request[v1.SendTextMessageRequest]) (*connect.Response[v1.SendTextMessageResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("message.v1.MessageService.SendTextMessage is not implemented"))
}
