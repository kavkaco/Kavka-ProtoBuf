// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: protobuf/events/v1/events.proto

package eventsv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/kavkaco/Kavka-ProtoBuf/gen/go/protobuf/events/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// EventsServiceName is the fully-qualified name of the EventsService service.
	EventsServiceName = "events.v1.EventsService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// EventsServiceSubscribeEventsStreamProcedure is the fully-qualified name of the EventsService's
	// SubscribeEventsStream RPC.
	EventsServiceSubscribeEventsStreamProcedure = "/events.v1.EventsService/SubscribeEventsStream"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	eventsServiceServiceDescriptor                     = v1.File_protobuf_events_v1_events_proto.Services().ByName("EventsService")
	eventsServiceSubscribeEventsStreamMethodDescriptor = eventsServiceServiceDescriptor.Methods().ByName("SubscribeEventsStream")
)

// EventsServiceClient is a client for the events.v1.EventsService service.
type EventsServiceClient interface {
	SubscribeEventsStream(context.Context, *connect.Request[v1.SubscribeEventsStreamRequest]) (*connect.ServerStreamForClient[v1.SubscribeEventsStreamResponse], error)
}

// NewEventsServiceClient constructs a client for the events.v1.EventsService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewEventsServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) EventsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &eventsServiceClient{
		subscribeEventsStream: connect.NewClient[v1.SubscribeEventsStreamRequest, v1.SubscribeEventsStreamResponse](
			httpClient,
			baseURL+EventsServiceSubscribeEventsStreamProcedure,
			connect.WithSchema(eventsServiceSubscribeEventsStreamMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// eventsServiceClient implements EventsServiceClient.
type eventsServiceClient struct {
	subscribeEventsStream *connect.Client[v1.SubscribeEventsStreamRequest, v1.SubscribeEventsStreamResponse]
}

// SubscribeEventsStream calls events.v1.EventsService.SubscribeEventsStream.
func (c *eventsServiceClient) SubscribeEventsStream(ctx context.Context, req *connect.Request[v1.SubscribeEventsStreamRequest]) (*connect.ServerStreamForClient[v1.SubscribeEventsStreamResponse], error) {
	return c.subscribeEventsStream.CallServerStream(ctx, req)
}

// EventsServiceHandler is an implementation of the events.v1.EventsService service.
type EventsServiceHandler interface {
	SubscribeEventsStream(context.Context, *connect.Request[v1.SubscribeEventsStreamRequest], *connect.ServerStream[v1.SubscribeEventsStreamResponse]) error
}

// NewEventsServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewEventsServiceHandler(svc EventsServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	eventsServiceSubscribeEventsStreamHandler := connect.NewServerStreamHandler(
		EventsServiceSubscribeEventsStreamProcedure,
		svc.SubscribeEventsStream,
		connect.WithSchema(eventsServiceSubscribeEventsStreamMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/events.v1.EventsService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case EventsServiceSubscribeEventsStreamProcedure:
			eventsServiceSubscribeEventsStreamHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedEventsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedEventsServiceHandler struct{}

func (UnimplementedEventsServiceHandler) SubscribeEventsStream(context.Context, *connect.Request[v1.SubscribeEventsStreamRequest], *connect.ServerStream[v1.SubscribeEventsStreamResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("events.v1.EventsService.SubscribeEventsStream is not implemented"))
}
