// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: protobuf/auth/v1/auth.proto

package authv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/kavkaco/Kavka-ProtoBuf/gen/go/protobuf/auth/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AuthServiceName is the fully-qualified name of the AuthService service.
	AuthServiceName = "auth.v1.AuthService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AuthServiceLoginProcedure is the fully-qualified name of the AuthService's Login RPC.
	AuthServiceLoginProcedure = "/auth.v1.AuthService/Login"
	// AuthServiceRegisterProcedure is the fully-qualified name of the AuthService's Register RPC.
	AuthServiceRegisterProcedure = "/auth.v1.AuthService/Register"
	// AuthServiceVerifyEmailProcedure is the fully-qualified name of the AuthService's VerifyEmail RPC.
	AuthServiceVerifyEmailProcedure = "/auth.v1.AuthService/VerifyEmail"
	// AuthServiceSendResetPasswordProcedure is the fully-qualified name of the AuthService's
	// SendResetPassword RPC.
	AuthServiceSendResetPasswordProcedure = "/auth.v1.AuthService/SendResetPassword"
	// AuthServiceSubmitResetPasswordProcedure is the fully-qualified name of the AuthService's
	// SubmitResetPassword RPC.
	AuthServiceSubmitResetPasswordProcedure = "/auth.v1.AuthService/SubmitResetPassword"
	// AuthServiceChangePasswordProcedure is the fully-qualified name of the AuthService's
	// ChangePassword RPC.
	AuthServiceChangePasswordProcedure = "/auth.v1.AuthService/ChangePassword"
	// AuthServiceAuthenticateProcedure is the fully-qualified name of the AuthService's Authenticate
	// RPC.
	AuthServiceAuthenticateProcedure = "/auth.v1.AuthService/Authenticate"
	// AuthServiceRefreshTokenProcedure is the fully-qualified name of the AuthService's RefreshToken
	// RPC.
	AuthServiceRefreshTokenProcedure = "/auth.v1.AuthService/RefreshToken"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	authServiceServiceDescriptor                   = v1.File_protobuf_auth_v1_auth_proto.Services().ByName("AuthService")
	authServiceLoginMethodDescriptor               = authServiceServiceDescriptor.Methods().ByName("Login")
	authServiceRegisterMethodDescriptor            = authServiceServiceDescriptor.Methods().ByName("Register")
	authServiceVerifyEmailMethodDescriptor         = authServiceServiceDescriptor.Methods().ByName("VerifyEmail")
	authServiceSendResetPasswordMethodDescriptor   = authServiceServiceDescriptor.Methods().ByName("SendResetPassword")
	authServiceSubmitResetPasswordMethodDescriptor = authServiceServiceDescriptor.Methods().ByName("SubmitResetPassword")
	authServiceChangePasswordMethodDescriptor      = authServiceServiceDescriptor.Methods().ByName("ChangePassword")
	authServiceAuthenticateMethodDescriptor        = authServiceServiceDescriptor.Methods().ByName("Authenticate")
	authServiceRefreshTokenMethodDescriptor        = authServiceServiceDescriptor.Methods().ByName("RefreshToken")
)

// AuthServiceClient is a client for the auth.v1.AuthService service.
type AuthServiceClient interface {
	Login(context.Context, *connect.Request[v1.LoginRequest]) (*connect.Response[v1.LoginResponse], error)
	Register(context.Context, *connect.Request[v1.RegisterRequest]) (*connect.Response[v1.RegisterResponse], error)
	VerifyEmail(context.Context, *connect.Request[v1.VerifyEmailRequest]) (*connect.Response[v1.VerifyEmailResponse], error)
	SendResetPassword(context.Context, *connect.Request[v1.SendResetPasswordRequest]) (*connect.Response[v1.SendResetPasswordResponse], error)
	SubmitResetPassword(context.Context, *connect.Request[v1.SubmitResetPasswordRequest]) (*connect.Response[v1.SubmitResetPasswordResponse], error)
	ChangePassword(context.Context, *connect.Request[v1.ChangePasswordRequest]) (*connect.Response[v1.ChangePasswordResponse], error)
	Authenticate(context.Context, *connect.Request[v1.AuthenticateRequest]) (*connect.Response[v1.AuthenticateResponse], error)
	RefreshToken(context.Context, *connect.Request[v1.RefreshTokenRequest]) (*connect.Response[v1.RefreshTokenResponse], error)
}

// NewAuthServiceClient constructs a client for the auth.v1.AuthService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAuthServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AuthServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &authServiceClient{
		login: connect.NewClient[v1.LoginRequest, v1.LoginResponse](
			httpClient,
			baseURL+AuthServiceLoginProcedure,
			connect.WithSchema(authServiceLoginMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		register: connect.NewClient[v1.RegisterRequest, v1.RegisterResponse](
			httpClient,
			baseURL+AuthServiceRegisterProcedure,
			connect.WithSchema(authServiceRegisterMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		verifyEmail: connect.NewClient[v1.VerifyEmailRequest, v1.VerifyEmailResponse](
			httpClient,
			baseURL+AuthServiceVerifyEmailProcedure,
			connect.WithSchema(authServiceVerifyEmailMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		sendResetPassword: connect.NewClient[v1.SendResetPasswordRequest, v1.SendResetPasswordResponse](
			httpClient,
			baseURL+AuthServiceSendResetPasswordProcedure,
			connect.WithSchema(authServiceSendResetPasswordMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		submitResetPassword: connect.NewClient[v1.SubmitResetPasswordRequest, v1.SubmitResetPasswordResponse](
			httpClient,
			baseURL+AuthServiceSubmitResetPasswordProcedure,
			connect.WithSchema(authServiceSubmitResetPasswordMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		changePassword: connect.NewClient[v1.ChangePasswordRequest, v1.ChangePasswordResponse](
			httpClient,
			baseURL+AuthServiceChangePasswordProcedure,
			connect.WithSchema(authServiceChangePasswordMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		authenticate: connect.NewClient[v1.AuthenticateRequest, v1.AuthenticateResponse](
			httpClient,
			baseURL+AuthServiceAuthenticateProcedure,
			connect.WithSchema(authServiceAuthenticateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		refreshToken: connect.NewClient[v1.RefreshTokenRequest, v1.RefreshTokenResponse](
			httpClient,
			baseURL+AuthServiceRefreshTokenProcedure,
			connect.WithSchema(authServiceRefreshTokenMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// authServiceClient implements AuthServiceClient.
type authServiceClient struct {
	login               *connect.Client[v1.LoginRequest, v1.LoginResponse]
	register            *connect.Client[v1.RegisterRequest, v1.RegisterResponse]
	verifyEmail         *connect.Client[v1.VerifyEmailRequest, v1.VerifyEmailResponse]
	sendResetPassword   *connect.Client[v1.SendResetPasswordRequest, v1.SendResetPasswordResponse]
	submitResetPassword *connect.Client[v1.SubmitResetPasswordRequest, v1.SubmitResetPasswordResponse]
	changePassword      *connect.Client[v1.ChangePasswordRequest, v1.ChangePasswordResponse]
	authenticate        *connect.Client[v1.AuthenticateRequest, v1.AuthenticateResponse]
	refreshToken        *connect.Client[v1.RefreshTokenRequest, v1.RefreshTokenResponse]
}

// Login calls auth.v1.AuthService.Login.
func (c *authServiceClient) Login(ctx context.Context, req *connect.Request[v1.LoginRequest]) (*connect.Response[v1.LoginResponse], error) {
	return c.login.CallUnary(ctx, req)
}

// Register calls auth.v1.AuthService.Register.
func (c *authServiceClient) Register(ctx context.Context, req *connect.Request[v1.RegisterRequest]) (*connect.Response[v1.RegisterResponse], error) {
	return c.register.CallUnary(ctx, req)
}

// VerifyEmail calls auth.v1.AuthService.VerifyEmail.
func (c *authServiceClient) VerifyEmail(ctx context.Context, req *connect.Request[v1.VerifyEmailRequest]) (*connect.Response[v1.VerifyEmailResponse], error) {
	return c.verifyEmail.CallUnary(ctx, req)
}

// SendResetPassword calls auth.v1.AuthService.SendResetPassword.
func (c *authServiceClient) SendResetPassword(ctx context.Context, req *connect.Request[v1.SendResetPasswordRequest]) (*connect.Response[v1.SendResetPasswordResponse], error) {
	return c.sendResetPassword.CallUnary(ctx, req)
}

// SubmitResetPassword calls auth.v1.AuthService.SubmitResetPassword.
func (c *authServiceClient) SubmitResetPassword(ctx context.Context, req *connect.Request[v1.SubmitResetPasswordRequest]) (*connect.Response[v1.SubmitResetPasswordResponse], error) {
	return c.submitResetPassword.CallUnary(ctx, req)
}

// ChangePassword calls auth.v1.AuthService.ChangePassword.
func (c *authServiceClient) ChangePassword(ctx context.Context, req *connect.Request[v1.ChangePasswordRequest]) (*connect.Response[v1.ChangePasswordResponse], error) {
	return c.changePassword.CallUnary(ctx, req)
}

// Authenticate calls auth.v1.AuthService.Authenticate.
func (c *authServiceClient) Authenticate(ctx context.Context, req *connect.Request[v1.AuthenticateRequest]) (*connect.Response[v1.AuthenticateResponse], error) {
	return c.authenticate.CallUnary(ctx, req)
}

// RefreshToken calls auth.v1.AuthService.RefreshToken.
func (c *authServiceClient) RefreshToken(ctx context.Context, req *connect.Request[v1.RefreshTokenRequest]) (*connect.Response[v1.RefreshTokenResponse], error) {
	return c.refreshToken.CallUnary(ctx, req)
}

// AuthServiceHandler is an implementation of the auth.v1.AuthService service.
type AuthServiceHandler interface {
	Login(context.Context, *connect.Request[v1.LoginRequest]) (*connect.Response[v1.LoginResponse], error)
	Register(context.Context, *connect.Request[v1.RegisterRequest]) (*connect.Response[v1.RegisterResponse], error)
	VerifyEmail(context.Context, *connect.Request[v1.VerifyEmailRequest]) (*connect.Response[v1.VerifyEmailResponse], error)
	SendResetPassword(context.Context, *connect.Request[v1.SendResetPasswordRequest]) (*connect.Response[v1.SendResetPasswordResponse], error)
	SubmitResetPassword(context.Context, *connect.Request[v1.SubmitResetPasswordRequest]) (*connect.Response[v1.SubmitResetPasswordResponse], error)
	ChangePassword(context.Context, *connect.Request[v1.ChangePasswordRequest]) (*connect.Response[v1.ChangePasswordResponse], error)
	Authenticate(context.Context, *connect.Request[v1.AuthenticateRequest]) (*connect.Response[v1.AuthenticateResponse], error)
	RefreshToken(context.Context, *connect.Request[v1.RefreshTokenRequest]) (*connect.Response[v1.RefreshTokenResponse], error)
}

// NewAuthServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAuthServiceHandler(svc AuthServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	authServiceLoginHandler := connect.NewUnaryHandler(
		AuthServiceLoginProcedure,
		svc.Login,
		connect.WithSchema(authServiceLoginMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	authServiceRegisterHandler := connect.NewUnaryHandler(
		AuthServiceRegisterProcedure,
		svc.Register,
		connect.WithSchema(authServiceRegisterMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	authServiceVerifyEmailHandler := connect.NewUnaryHandler(
		AuthServiceVerifyEmailProcedure,
		svc.VerifyEmail,
		connect.WithSchema(authServiceVerifyEmailMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	authServiceSendResetPasswordHandler := connect.NewUnaryHandler(
		AuthServiceSendResetPasswordProcedure,
		svc.SendResetPassword,
		connect.WithSchema(authServiceSendResetPasswordMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	authServiceSubmitResetPasswordHandler := connect.NewUnaryHandler(
		AuthServiceSubmitResetPasswordProcedure,
		svc.SubmitResetPassword,
		connect.WithSchema(authServiceSubmitResetPasswordMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	authServiceChangePasswordHandler := connect.NewUnaryHandler(
		AuthServiceChangePasswordProcedure,
		svc.ChangePassword,
		connect.WithSchema(authServiceChangePasswordMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	authServiceAuthenticateHandler := connect.NewUnaryHandler(
		AuthServiceAuthenticateProcedure,
		svc.Authenticate,
		connect.WithSchema(authServiceAuthenticateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	authServiceRefreshTokenHandler := connect.NewUnaryHandler(
		AuthServiceRefreshTokenProcedure,
		svc.RefreshToken,
		connect.WithSchema(authServiceRefreshTokenMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/auth.v1.AuthService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AuthServiceLoginProcedure:
			authServiceLoginHandler.ServeHTTP(w, r)
		case AuthServiceRegisterProcedure:
			authServiceRegisterHandler.ServeHTTP(w, r)
		case AuthServiceVerifyEmailProcedure:
			authServiceVerifyEmailHandler.ServeHTTP(w, r)
		case AuthServiceSendResetPasswordProcedure:
			authServiceSendResetPasswordHandler.ServeHTTP(w, r)
		case AuthServiceSubmitResetPasswordProcedure:
			authServiceSubmitResetPasswordHandler.ServeHTTP(w, r)
		case AuthServiceChangePasswordProcedure:
			authServiceChangePasswordHandler.ServeHTTP(w, r)
		case AuthServiceAuthenticateProcedure:
			authServiceAuthenticateHandler.ServeHTTP(w, r)
		case AuthServiceRefreshTokenProcedure:
			authServiceRefreshTokenHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAuthServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAuthServiceHandler struct{}

func (UnimplementedAuthServiceHandler) Login(context.Context, *connect.Request[v1.LoginRequest]) (*connect.Response[v1.LoginResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("auth.v1.AuthService.Login is not implemented"))
}

func (UnimplementedAuthServiceHandler) Register(context.Context, *connect.Request[v1.RegisterRequest]) (*connect.Response[v1.RegisterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("auth.v1.AuthService.Register is not implemented"))
}

func (UnimplementedAuthServiceHandler) VerifyEmail(context.Context, *connect.Request[v1.VerifyEmailRequest]) (*connect.Response[v1.VerifyEmailResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("auth.v1.AuthService.VerifyEmail is not implemented"))
}

func (UnimplementedAuthServiceHandler) SendResetPassword(context.Context, *connect.Request[v1.SendResetPasswordRequest]) (*connect.Response[v1.SendResetPasswordResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("auth.v1.AuthService.SendResetPassword is not implemented"))
}

func (UnimplementedAuthServiceHandler) SubmitResetPassword(context.Context, *connect.Request[v1.SubmitResetPasswordRequest]) (*connect.Response[v1.SubmitResetPasswordResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("auth.v1.AuthService.SubmitResetPassword is not implemented"))
}

func (UnimplementedAuthServiceHandler) ChangePassword(context.Context, *connect.Request[v1.ChangePasswordRequest]) (*connect.Response[v1.ChangePasswordResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("auth.v1.AuthService.ChangePassword is not implemented"))
}

func (UnimplementedAuthServiceHandler) Authenticate(context.Context, *connect.Request[v1.AuthenticateRequest]) (*connect.Response[v1.AuthenticateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("auth.v1.AuthService.Authenticate is not implemented"))
}

func (UnimplementedAuthServiceHandler) RefreshToken(context.Context, *connect.Request[v1.RefreshTokenRequest]) (*connect.Response[v1.RefreshTokenResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("auth.v1.AuthService.RefreshToken is not implemented"))
}
